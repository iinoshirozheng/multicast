name: C++ CI with CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        compiler: [gcc, clang]
        exclude:
          # Exclude gcc on macOS
          - os: macos-latest
            compiler: gcc

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      env:
        CC: ${{ matrix.compiler == 'gcc' && 'gcc' || 'clang' }}
        CXX: ${{ matrix.compiler == 'gcc' && 'g++' || 'clang++' }}

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure
      
  static-analysis:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Install cppcheck
      run: sudo apt-get update && sudo apt-get install -y cppcheck
      
    - name: Run cppcheck
      run: cppcheck --enable=all --suppress=missingIncludeSystem --error-exitcode=1 stream_buffer/
      
  code-coverage:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure CMake with Coverage
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Debug -DENABLE_COVERAGE=ON
      
    - name: Build
      run: cmake --build ${{github.workspace}}/build
      
    - name: Run tests with coverage
      working-directory: ${{github.workspace}}/build
      run: ctest

    - name: Generate coverage report
      working-directory: ${{github.workspace}}/build
      run: |
        lcov --directory . --capture --output-file coverage.info
        lcov --remove coverage.info '/usr/*' --output-file coverage.info
        lcov --list coverage.info 
